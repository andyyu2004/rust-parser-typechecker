fn x: fn (Int, fn (Int) -> Bool) -> Int => 5
fn x: fn (Int, fn (Int) -> Bool) => 5
fn x: (Int, fn (Int) -> Bool) => 5
fn x => x
fn x => fn y => x
fn x => fn y => y
let f = fn x => x in f
\f => f(f)
fn f => f(f)
fn f => f
let f = fn x => x
let f = fn x => x in f
let f = fn x => x in f(4)
let f = fn x => x in f
let f = fn x => x in f(5)
let f = fn x => x in f
1
2
3
fn x => x
let f = fn x => x in f
let f = fn x => x in f(4)
let f = fn x => x in f
let x = 5 in x
let x: Bool = 5 in x
let x: Bool = false in x
{}
{ 5 }
{ 5; }
{ 5 }
{ let x = 5 in x;
{ let x = 5 in x; }
{ let x = 5 in x; 5 }
{ let x: Bool = 5 in x; 5 }
{ let x = 5 in x; 5 }
3
2
{ let x = 5 in x; 5 }
{ let x = 5 in x; 67 }
{ let x = 5 in x; false }
{ let x = 5 in x; 67 }
3
123
{ let x = 5 in x; false }
{ let x = 5 in x; false
{ let x = 5 in x; fals
{ let x = 5 in x; fals }
{ let x = 5 in x fals }
2 +
2 + 3
1
2
3
4
1 +
let x : Bool = 5 in x
4
4 +
let x : Bool = 5 in x
{ 1;2;3;4;5; }
let x: Bool = { 1;2;3;4;5; }
let x: Bool = { 1;2;3;4;5; } in 5
let x: Bool = { 1;2;3;4;  5; } in 5
let x: Bool = { 1;2;3;4+;  5; } in 5
let x: Bool = { 1;2;3;4+ ;  5; } in 5
{ let x = 5 in let y = 5 in x
{ let x = 5 in let y = 5 in x }
{ let x = 5 in let y = 5 in x 
let x = 5;
let x = 5
{ let x = 5; x }
{ let x = 5; let y = 5; x + y }
{ let x = 5; let y = false; y }
{ let f = fn x => x; f }
{ let f = fn x => x; f(4) }
{ let f = fn x => x; f(4); f(false) }
{ let f = fn x => x; f(4) }
{ let f = fn x => x; f(false) }
ls
{ let f = fn x => x; f(false) }
{ let f = fn x => x; f(false); f(true) }
{ let f = fn x => x; f(false); f(5) }
{ let f = fn x => x; f(false); }
{ let f = fn x => x; f(false) }
{ let f = fn x => x; f(false); f(5) }
{ let f = fn x => x; f }
{ let f = fn x => x; f(5) }
{ let f = fn x => x; f(4) }
{ let f: fn(Int) -> Int  = fn x => x; f(4) }
{ let f: fn(Int) -> Int  = fn x => x; f(false) }
{ let f: fn(Int) -> Int  = fn x => x; f(4) }
{ let f: fn(Int) -> Int  = fn x => x; f(4); f(false) }
{ let f  = fn x => x; f(4); f(false) }
{ let f  = fn x => x; f(4); f(false); f(4) }
(5)
(fn x => x)
(fn x => x)(4)
(fn x => x)
{ let f  = fn x => x; f(4); f(false); f(4) }
{ let f  = fn x => x; f(4); f(false); f(4); f(false) }
